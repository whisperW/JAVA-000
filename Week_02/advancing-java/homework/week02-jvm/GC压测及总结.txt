4G堆内存压测:

CMS GC
压测参数:  java -jar -XX:+UseConcMarkSweepGC -Xmx4g -Xms4g gateway-server-0.0.1-SNAPSHOT.jar
压测结果:
RPS: 2244.9 (requests/second)
Max: 329ms
Min: 0ms
Avg: 0.5ms

  50%   below 0ms
  60%   below 0ms
  70%   below 0ms
  80%   below 0ms
  90%   below 1ms
  95%   below 3ms
  98%   below 6ms
  99%   below 8ms
99.9%   below 24ms


ParallelGC
压测参数:  java -jar -XX:+UseParallelGC -Xmx4g -Xms4g gateway-server-0.0.1-SNAPSHOT.jar
压测结果:
RPS: 2633.5 (requests/second)
Max: 153ms
Min: 0ms
Avg: 0.3ms

  50%   below 0ms
  60%   below 0ms
  70%   below 0ms
  80%   below 0ms
  90%   below 1ms
  95%   below 1ms
  98%   below 4ms
  99%   below 5ms
99.9%   below 11ms


SerialGC

压测参数:  java -jar -XX:+UseSerialGC -Xmx4g -Xms4g gateway-server-0.0.1-SNAPSHOT.jar
压测结果:

RPS: 2246.5 (requests/second)
Max: 349ms
Min: 0ms
Avg: 0.5ms

  50%   below 0ms
  60%   below 0ms
  70%   below 0ms
  80%   below 0ms
  90%   below 1ms
  95%   below 3ms
  98%   below 5ms
  99%   below 7ms
99.9%   below 18ms

GabageFirst GC

压测参数:  java -jar -XX:+UseG1GC -Xmx4g -Xms4g gateway-server-0.0.1-SNAPSHOT.jar
压测结果:

RPS: 2372.3 (requests/second)
Max: 367ms
Min: 0ms
Avg: 0.4ms

  50%   below 0ms
  60%   below 0ms
  70%   below 0ms
  80%   below 0ms
  90%   below 1ms
  95%   below 2ms
  98%   below 5ms
  99%   below 7ms
99.9%   below 17ms


总结:
    在指定堆内存4G情况下,整体的吞吐量各GC算法排序如下
    ParallelGC > G1 > SerialGC ≈ CMS GC

    可以看出ParallelGC在堆足够大,且压测时间比较短时,吞吐量的优势很大,未跟踪FullGC情况,猜测未产生FullGC导致很长的STW,所以ParallelGC的最大访问时间(延迟)也是最低的.


512m堆内存压测:

CMS GC
压测参数:  java -jar -XX:+UseConcMarkSweepGC -Xmx512m -Xms512m gateway-server-0.0.1-SNAPSHOT.jar
压测结果:
RPS: 2201.2 (requests/second)
Max: 328ms
Min: 0ms
Avg: 0.5ms

  50%   below 0ms
  60%   below 0ms
  70%   below 0ms
  80%   below 0ms
  90%   below 1ms
  95%   below 3ms
  98%   below 6ms
  99%   below 8ms
99.9%   below 18ms

ParallelGC
压测参数:  java -jar -XX:+UseParallelGC -Xmx512m -Xms512m gateway-server-0.0.1-SNAPSHOT.jar
压测结果:
RPS: 2476 (requests/second)
Max: 325ms
Min: 0ms
Avg: 0.4ms

  50%   below 0ms
  60%   below 0ms
  70%   below 0ms
  80%   below 0ms
  90%   below 1ms
  95%   below 2ms
  98%   below 4ms
  99%   below 6ms
99.9%   below 14ms


SerialGC

压测参数:  java -jar -XX:+UseSerialGC -Xmx512m -Xms512m gateway-server-0.0.1-SNAPSHOT.jar
压测结果:

RPS: 2347.8 (requests/second)
Max: 354ms
Min: 0ms
Avg: 0.5ms

  50%   below 0ms
  60%   below 0ms
  70%   below 0ms
  80%   below 0ms
  90%   below 1ms
  95%   below 3ms
  98%   below 5ms
  99%   below 7ms
99.9%   below 17ms


GabageFirst GC

压测参数:  java -jar -XX:+UseG1GC -Xmx512m -Xms512m gateway-server-0.0.1-SNAPSHOT.jar
压测结果:

RPS: 2387.2 (requests/second)
Max: 394ms
Min: 0ms
Avg: 0.4ms

  50%   below 0ms
  60%   below 0ms
  70%   below 0ms
  80%   below 0ms
  90%   below 1ms
  95%   below 2ms
  98%   below 4ms
  99%   below 6ms
99.9%   below 17ms

总结:
    在指定堆内存512m情况下,整体的吞吐量各GC算法排序如下
    ParallelGC > G1 > SerialGC > CMS GC

    可以看出当堆内存处于512m稍小的情况下: ParallelGC的吞吐量仍位于第一,但优势不再明显, G1性能仍处于第2位,
    CMS GC因为垃圾回收线程会与应用线程并发执行,抢占CPU时间片及系统资源,会对系统吞吐量产生一定影响.


128m堆内存压测:

CMS GC
压测参数:  java -jar -XX:+UseConcMarkSweepGC -Xmx128m -Xms128m gateway-server-0.0.1-SNAPSHOT.jar
压测结果:
RPS: 2470.9 (requests/second)
Max: 328ms
Min: 0ms
Avg: 0.4ms

  50%   below 0ms
  60%   below 0ms
  70%   below 0ms
  80%   below 0ms
  90%   below 1ms
  95%   below 2ms
  98%   below 4ms
  99%   below 6ms
99.9%   below 15ms

ParallelGC
压测参数:  java -jar -XX:+UseParallelGC -Xmx128m -Xms128m gateway-server-0.0.1-SNAPSHOT.jar
压测结果:
RPS: 2399.8 (requests/second)
Max: 351ms
Min: 0ms
Avg: 0.4ms

  50%   below 0ms
  60%   below 0ms
  70%   below 0ms
  80%   below 0ms
  90%   below 1ms
  95%   below 2ms
  98%   below 5ms
  99%   below 6ms
99.9%   below 14ms


SerialGC

压测参数:  java -jar -XX:+UseSerialGC -Xmx128m -Xms128m gateway-server-0.0.1-SNAPSHOT.jar
压测结果:
RPS: 2391.7 (requests/second)
Max: 342ms
Min: 0ms
Avg: 0.5ms

  50%   below 0ms
  60%   below 0ms
  70%   below 0ms
  80%   below 0ms
  90%   below 1ms
  95%   below 3ms
  98%   below 5ms
  99%   below 7ms
99.9%   below 16ms


GabageFirst GC

压测参数:  java -jar -XX:+UseG1GC -Xmx128m -Xms128m gateway-server-0.0.1-SNAPSHOT.jar
压测结果:
RPS: 2201 (requests/second)
Max: 362ms
Min: 0ms
Avg: 0.5ms

  50%   below 0ms
  60%   below 0ms
  70%   below 0ms
  80%   below 0ms
  90%   below 1ms
  95%   below 3ms
  98%   below 5ms
  99%   below 7ms
99.9%   below 16ms

总结:
    在指定堆内存128m情况下,此时堆内存处于过小状态,显然不属于正常应用在JVM运行时合适堆内存要求大小,此时整体的吞吐量各GC算法排序如下
    CMS GC > ParallelGC ≈ SerialGC > G1

    可以看出当堆内存处于128m情况下: CMS GC吞吐量处于第一,但和Parallel 与 SerailGC的整体上差别不大, G1性能处于最末尾.
    G1 GC因为会对整个堆进行region切分,当堆内存大时,G1GC的优势会明显, 但是当堆内存过小时,G1吞吐量最差.

     从G1的jmap -heap命令可以看到  region区会每个region划分1m空间,一共128个region.

   G1 Heap
   Heap Usage:
   G1 Heap:
      regions  = 128
      capacity = 134217728 (128.0MB)
      used     = 63481728 (60.5408935546875MB)
      free     = 70736000 (67.4591064453125MB)
      47.29757308959961% used
   G1 Young Generation:
   Eden Space:
      regions  = 33
      capacity = 82837504 (79.0MB)
      used     = 34603008 (33.0MB)
      free     = 48234496 (46.0MB)
      41.77215189873418% used
   Survivor Space:
      regions  = 1
      capacity = 1048576 (1.0MB)
      used     = 1048576 (1.0MB)
      free     = 0 (0.0MB)
      100.0% used
   G1 Old Generation:
      regions  = 28
      capacity = 50331648 (48.0MB)
      used     = 27830144 (26.5408935546875MB)
      free     = 22501504 (21.4591064453125MB)
      55.29352823893229% used